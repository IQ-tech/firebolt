name: Canary

on:
  pull_request:
    branches: [main, latest]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: canary-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  canary:
    name: Canary publish (tests + publish next)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
      - name: Setup npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          npm whoami || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Install deps
        run: yarn install --frozen-lockfile
      - name: Build libs
        run: yarn build:libs
      - name: Check changed packages
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            client:
              - 'packages/client/src/**'
            validators:
              - 'packages/validators/src/**'
            clientCore:
              - 'packages/client-core/lib/**'
      - name: test client core
        if: steps.changes.outputs.clientCore == 'true'
        run: yarn test:client-core:coverage
      - name: Report Client Core Coverage
        if: steps.changes.outputs.clientCore == 'true'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: client-core
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: test client
        if: steps.changes.outputs.client == 'true'
        run: yarn test:client:coverage
      - name: Report Client Coverage
        if: steps.changes.outputs.client == 'true'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: client
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: test validators
        if: steps.changes.outputs.validators == 'true'
        run: yarn test:validators:coverage
      - name: Report Validators Coverage
        if: steps.changes.outputs.validators == 'true'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: validators
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: Compute ephemeral canary version
        if: success()
        id: version
        run: |
          BASE_VERSION=$(node -p 'require("./lerna.json").version')
          SHORT_SHA=$(git rev-parse --short HEAD)
          EPHEMERAL_VERSION="${BASE_VERSION}-next.${SHORT_SHA}.${GITHUB_RUN_ATTEMPT}"
          echo "EPHEMERAL_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_ENV
          echo "EPHEMERAL_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_OUTPUT
      - name: Inject ephemeral version in packages
        if: success()
        run: |
          EPV="$EPHEMERAL_VERSION"
          echo "Aplicando versão efêmera $EPV nos package.json (sem commit)"
          jq --arg v "$EPV" '.version = $v' lerna.json > lerna.tmp && mv lerna.tmp lerna.json
          for PKG in packages/*/package.json; do
            jq --arg v "$EPV" '.version = $v' "$PKG" > "$PKG.tmp" && mv "$PKG.tmp" "$PKG" || exit 1
          done
      - name: Publish canary (no commit/tag)
        if: success()
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx lerna publish from-package --dist-tag next --yes --no-verify-access || echo "Nenhum pacote alterado para publicar (ok)"
          echo "CURRENT_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_ENV
      - name: PR Success Comment
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const curr = process.env.CURRENT_VERSION;
            const number = context.payload.pull_request.number;
            const body = `Canary publicado: v${curr}`;
            await github.rest.issues.createComment({
              issue_number: number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
      - name: PR Failure Comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const number = context.payload.pull_request.number;
            const body = 'Canary não publicado: testes falharam. Verifique os logs do workflow.';
            await github.rest.issues.createComment({
              issue_number: number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
