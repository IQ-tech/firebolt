name: Canary (after tests)

on:
  workflow_run:
    workflows: ["Packages tests (vitest)"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: canary-main-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

jobs:
  canary:
    name: Canary publish next
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow run event payload
        uses: actions/download-artifact@v4
        if: false # placeholder (não usamos artifacts, mas mantemos passo visível para debug futuro)
      - name: Extract PR data
        id: pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Recupera lista de commits do workflow_run para identificar PR associado
            const runId = context.payload.workflow_run.id;
            const {data: prList} = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} type:pr is:open sha:${context.payload.workflow_run.head_sha}`
            });
            if (!prList.items.length) {
              core.setFailed('Nenhum PR aberto encontrado para head_sha');
              return;
            }
            const pr = prList.items[0];
            core.setOutput('number', pr.number);
            core.setOutput('head_ref', context.payload.workflow_run.head_branch);
            console.log(`PR identificado #${pr.number} branch ${context.payload.workflow_run.head_branch}`);
            core.exportVariable('PR_NUMBER', pr.number);
            core.exportVariable('PR_HEAD_REF', context.payload.workflow_run.head_branch);
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
      - name: Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Setup npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          npm whoami || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Install
        run: yarn install --frozen-lockfile
      - name: Build libs
        run: yarn build:libs
      - name: Compute ephemeral canary version
        id: version
        run: |
          BASE_VERSION=$(node -p 'require("./lerna.json").version')
          SHORT_SHA=$(git rev-parse --short HEAD)
          EPHEMERAL_VERSION="${BASE_VERSION}-next.${SHORT_SHA}"
          echo "EPHEMERAL_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_ENV
          echo "EPHEMERAL_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_OUTPUT
      - name: Inject ephemeral version in packages
        run: |
          EPV="$EPHEMERAL_VERSION"
          echo "Aplicando versão efêmera $EPV nos package.json (sem commit)" 
          jq --arg v "$EPV" '.version = $v' lerna.json > lerna.tmp && mv lerna.tmp lerna.json
          for PKG in packages/*/package.json; do
            jq --arg v "$EPV" '.version = $v' "$PKG" > "$PKG.tmp" && mv "$PKG.tmp" "$PKG" || exit 1
          done
      - name: Publish canary (no commit/tag)
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publica todos os pacotes com a versão efêmera e dist-tag next sem criar git commit/tag
          npx lerna publish from-package --dist-tag next --yes --no-verify-access || echo "Nenhum pacote alterado para publicar (ok)"
          echo "CURRENT_VERSION=$EPHEMERAL_VERSION" >> $GITHUB_ENV
      - name: PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const curr = process.env.CURRENT_VERSION;
            const prNumber = Number(process.env.PR_NUMBER || '0');
            if (!prNumber) {
              core.warning('PR não identificado para comentar.');
              return;
            }
            const body = `Canary Publicado: v${curr}`;
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
