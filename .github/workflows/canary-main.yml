name: Canary

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: canary-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  canary:
    name: Canary publish (tests + publish next)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
      - name: Setup npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          npm whoami || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Validate Lerna version
        run: |
          # Checkout PR branch
          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}

          # Get Lerna version from PR branch
          pr_version=$(jq -r .version lerna.json)
          echo "PR_VERSION=$pr_version" >> $GITHUB_ENV

          # Checkout main branch
          git fetch origin main
          git checkout main

          # Get Lerna version from main branch
          main_version=$(jq -r .version lerna.json)
          echo "MAIN_VERSION=$main_version" >> $GITHUB_ENV

          # Display versions being compared
          echo "VERSION MAIN: $main_version"
          echo "VERSION PR: $pr_version"

          # Compare versions
          if printf "%s\n%s" "$main_version" "$pr_version" | sort -V | head -n1 | grep -q "$pr_version"; then
            echo -e "⚠️ A versão do lerna.json no PR ($pr_version) não é válida.\n\nEla deve ser **MAIOR** que a versão atual da main ($main_version).\n\nPor favor, atualize sua branch com a main e rode o seguinte comando para corrigir:\n\n`yarn version:patch`" > comment.txt
            gh issue comment ${{ github.event.pull_request.number }} --body-file comment.txt
            exit 1
          fi
      - name: Install deps
        run: yarn install --frozen-lockfile
      - name: Build libs
        run: yarn build:libs
      - name: Test client-core (aggregate)
        run: |
          set +e
          yarn test:client-core:coverage
          RC=$?
          if [ $RC -ne 0 ]; then echo client-core >> failed-tests.txt; fi
          exit 0
      - name: Report Client Core Coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: client-core
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: Test client (aggregate)
        run: |
          set +e
          yarn test:client:coverage
          RC=$?
          if [ $RC -ne 0 ]; then echo client >> failed-tests.txt; fi
          exit 0
      - name: Report Client Coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: client
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: Test validators (aggregate)
        run: |
          set +e
          yarn test:validators:coverage
          RC=$?
          if [ $RC -ne 0 ]; then echo validators >> failed-tests.txt; fi
          exit 0
      - name: Report Validators Coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          name: validators
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
      - name: Evaluate aggregated test result
        run: |
          if [ -f failed-tests.txt ]; then
            echo "::error::Falhas em pacotes de teste:";
            cat failed-tests.txt | sed 's/^/- /';
            echo "Marcando job como failed";
            exit 1;
          else
            echo "Todos os testes passaram em todos os pacotes";
          fi
      - name: Set canary version
        run: |
          pr_version=$(jq -r .version lerna.json)
          hash=$(git rev-parse --short HEAD)
          canary_version="$pr_version-next.$hash"
          echo "CANARY_VERSION=$canary_version" >> $GITHUB_ENV
          echo "Canary version set to $canary_version"

      - name: Publish canary (no commit/tag)
        if: success()
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publicando versão canary..."
          echo "Conteúdo do lerna.json:"
          cat lerna.json
          echo "Versão extraída:"
          jq -r .version lerna.json || echo "Erro ao acessar a versão no lerna.json"
          npx lerna publish from-package --dist-tag next --yes --no-verify-access || echo "Nenhum pacote alterado para publicar (ok)"
          if [ -n "$CANARY_VERSION" ]; then
            echo "CURRENT_VERSION=$CANARY_VERSION" >> $GITHUB_ENV
          else
            echo "Nenhuma versão publicada."

      - name: PR Success Comment
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const curr = process.env.CURRENT_VERSION;
            const number = context.payload.pull_request.number;
            let body;
            if (curr) {
              body = `Canary publicado: v${curr}`;
            } else {
              body = 'Nenhuma versão publicada: nenhum pacote foi alterado.';
            }
            await github.rest.issues.createComment({
              issue_number: number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
      - name: PR Failure Comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const number = context.payload.pull_request.number;
            const body = 'Canary não publicado: testes falharam. Verifique os logs do workflow.';
