/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This version should match with the used Firebolt version
 */
export type SchemaVersion = string;
/**
 * The Version of the Experience
 */
export type ExperienceVersion = string;
/**
 * Name of the JSON form
 */
export type ExperienceName = string;
/**
 * Description of the current JSON
 */
export type ExperienceDescription = string;
/**
 * This field requires a keyword to categorize the form
 */
export type ExperienceCategory = string;
/**
 * strategy: This property should blablabla....
 */
export type DecisionHandlingStrategy = "remote" | "local";
/**
 * This property should receive an array of objects contain the step slug and an boolean value to say if the processedData must be saved on localStorage, then, the decisionHandler calls will happen on transitioning from these steps.
 *
 * @minItems 1
 */
export type TheTriggersSchema = TheTriggersSchema1 & TheTriggersSchema2;
export type TheTriggersSchema1 = string;
export type TheTriggersSchema2 = [
  PropertiesDecisionHandlerPropertiesTriggersItems,
  ...PropertiesDecisionHandlerPropertiesTriggersItems[]
];
/**
 * saveProcessedData: This property blablabla etc...
 */
export type TheSaveProcessedDataSchema = string;
/**
 * Flows are the possible flows that can be performed during a form completion experience. the form process will use only one flow at time, but the firebolt api can change the flow of a form on the process.
 *
 * @minItems 1
 */
export type FormFlows = [PropertiesFlowsItems, ...PropertiesFlowsItems[]];
export type PropertiesFlowsItems = AnyFlow;
/**
 * An identifier to the flow, every form should have a default flow
 */
export type SlugOfTheFlow = string;
export type PropertiesFlowsItemsAnyOfFlowItemPropertiesStepsSlugsItems = TheFirstAnyOfSchema;
export type TheFirstAnyOfSchema = string;
/**
 * The list of steps that this flow should have, this array contains a list of steps slugs
 */
export type FlowStepsList = PropertiesFlowsItemsAnyOfFlowItemPropertiesStepsSlugsItems[];
/**
 * Here we can define the possible steps that the form can have
 *
 * @minItems 1
 */
export type TheStepsListOfTheForm = [PropertiesStepsItems, ...PropertiesStepsItems[]];
export type PropertiesStepsItems = AStepConfig;
/**
 * An unique identifier to this step
 */
export type StepSlug = string;
/**
 * Should be 'form' or 'custom', is used to distiguish between a regular form step or a custom step that should not have field validations
 */
export type FormStepTitle = string;
/**
 * this property is used to define a friendly display name to the step
 */
export type TheFriendlynameSchema = string;
/**
 * Used to define the list of fields inside a step, is not required in custom steps
 *
 * @minItems 1
 */
export type TheFieldsSchema = [
  PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItems,
  ...PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItems[]
];
export type PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItems = TheFirstAnyOfSchema1;
/**
 * An unique identifier to the field
 */
export type FieldSlug = string;
/**
 * The Widget (firebolt-client component) that should be used on render the form. check the firebolt client to see the available widgets. custom widgets can be used with custom firebolt-client themes
 */
export type UIWidget = string;
/**
 * Used to apply a preset of props to a field Widget
 */
export type UIPropsPreset = string | unknown[];
/**
 * Conditionally add properties to a widget
 *
 * @minItems 1
 */
export type UIPropsConditional = [
  PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesUi3ApropsConditionalItems,
  ...PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesUi3ApropsConditionalItems[]
];
export type PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesUi3ApropsConditionalItems =
  UIPropConditionalItem;
/**
 * receive a conditional expression, if evaluated truthy on the fron-end, then the props will be passed to the field widget
 */
export type UIPropConditional = string;
/**
 * Set field horizontal size on UI
 */
export type FieldSize = "half" | "full";
/**
 * receives a logical expression, if false the field won't be rendered or validated
 */
export type ConditionalField = string;
export type PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesValidatorsItems =
  TheFirstAnyOfSchema2;
/**
 * here we can pass the validator name, check firebolt validators lib to se the supported validators
 */
export type ValidatorName = string;
/**
 * Specify the context when the validator should be used
 */
export type PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesValidatorsItemsAnyOf0PropertiesContext =
  "client" | "server";
/**
 * Used to defined wich validators should be applied to the field, these validators can run on the client app or in the server
 */
export type FieldsValidatorsConfiguration =
  PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesValidatorsItems[];

/**
 * This schema should be used to the creation and validation of Firebolt Forms JSON files
 */
export interface TheFireboltFormSchema {
  "$schema-version": SchemaVersion;
  "$experience-version": ExperienceVersion;
  name: ExperienceName;
  description?: ExperienceDescription;
  category?: ExperienceCategory;
  decisionHandlerConfig?: DecisionHandlerConfig;
  flows: FormFlows;
  steps: TheStepsListOfTheForm;
}
/**
 * While transitioning steps, firebolt can execute a middleware called decision handler, with this function the developer can modify the natural flow of the experience, process incoming data...
 */
export interface DecisionHandlerConfig {
  strategy: DecisionHandlingStrategy;
  triggers: TheTriggersSchema;
  saveProcessedData?: TheSaveProcessedDataSchema;
  remoteConfig?: TheRemoteConfigSchema;
}
export interface PropertiesDecisionHandlerPropertiesTriggersItems {
  [k: string]: unknown;
}
/**
 * remoteConfig: This property should blablabla....
 */
export interface TheRemoteConfigSchema {
  [k: string]: unknown;
}
/**
 * At least a default flow is required
 */
export interface AnyFlow {
  slug: SlugOfTheFlow;
  stepsSlugs: FlowStepsList;
}
/**
 * An explanation about the purpose of this instance.
 */
export interface AStepConfig {
  step: TheStepSchema;
  [k: string]: unknown;
}
/**
 * Here we can define the config for the current step
 */
export interface TheStepSchema {
  slug: StepSlug;
  type: FormStepTitle;
  friendlyname: TheFriendlynameSchema;
  fields?: TheFieldsSchema;
}
/**
 * Used to display a field in the form
 */
export interface TheFirstAnyOfSchema1 {
  slug: FieldSlug;
  "ui:widget": UIWidget;
  "ui:props": FieldUIProps;
  "ui:props-preset"?: UIPropsPreset;
  "ui:props-conditional"?: UIPropsConditional;
  "ui:styles"?: UIStylesKey;
  conditional?: ConditionalField;
  validators?: FieldsValidatorsConfiguration;
}
/**
 * Any value that can be passed right to the UI Widgets (components), values like label, placeholde, options, etc. these options are defined by the theme used by the front-end app
 */
export interface FieldUIProps {
  [k: string]: unknown;
}
export interface UIPropConditionalItem {
  conditional: UIPropConditional;
  props: UIPropsConditionalProps;
}
/**
 * can have any properties inside
 */
export interface UIPropsConditionalProps {
  [k: string]: unknown;
}
/**
 * used to modify certain aspects of the fields presentation, such as size
 */
export interface UIStylesKey {
  size?: FieldSize;
  [k: string]: unknown;
}
/**
 * An explanation about the purpose of this instance.
 */
export interface TheFirstAnyOfSchema2 {
  type: ValidatorName;
  properties?: ValidatorProperties;
  context?: PropertiesStepsItemsAnyOf0PropertiesStepPropertiesFieldsItemsAnyOf0PropertiesValidatorsItemsAnyOf0PropertiesContext;
  [k: string]: unknown;
}
/**
 * Any property that should be passed to the validator
 */
export interface ValidatorProperties {
  [k: string]: unknown;
}
